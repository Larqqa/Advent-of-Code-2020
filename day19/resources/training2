42: 9 14 | 10 1
9: 14 27 | 1 26
10: 23 14 | 28 1
1: "a"
11: 42 31
5: 1 14 | 15 1
19: 14 1 | 14 14
12: 24 14 | 19 1
16: 15 1 | 14 14
31: 14 17 | 1 13
6: 14 14 | 1 14
2: 1 24 | 14 4
0: 8 11
13: 14 3 | 1 12
15: 1 | 14function getInput(filename)
  file = open(filename, "r");
  input = replace(read(file, String), "\"" => "");
  (rules, messages) = map((x) -> split(x, "\n"), split(input, "\n\n"));
  close(file);

  tree = Dict();
  for rule in rules
    (name, rest) = split(rule, ": ");
    tree[name] = rest;
  end

  return tree, messages;
end

function buildRegex(leaf, tree)
  regExp = "";

  for char in split(leaf)
    if occursin(char, "|ab")
      regExp = regExp * char;
      continue;
    else
      subrule = buildRegex(tree[char], tree)
      if occursin("|", subrule)
        subrule = "($subrule)";
      end

      regExp = regExp * subrule;
    end
  end

  return regExp;
end

function countMatches(tree, messages)
  tree["8"] = "42 | 42 8"
  tree["11"] = "42 31 | 42 11 31"
  rx42 = buildRegex(tree["42"], tree)
  rx31 = buildRegex(tree["31"], tree)

  builder(i) = "(($rx42){$i}($rx31){$i})";
  rule = Regex("^(($rx42)+($(builder(1))|$(builder(2))|$(builder(3))|$(builder(4))))\$", "x");
  println(rule);

  return count(!isnothing, match.(rule, messages));
end

(tree, messages) = getInput("resources/training2");
println(countMatches(tree, messages));

17: 14 2 | 1 7
23: 25 1 | 22 14
28: 16 1
4: 1 1
20: 14 14 | 1 15
3: 5 14 | 16 1
27: 1 6 | 14 18
14: "b"
21: 14 1 | 1 14
25: 1 1 | 1 14
22: 14 14
8: 42
26: 14 22 | 1 20
18: 15 15
7: 14 5 | 1 21
24: 14 1

abbbbbabbbaaaababbaabbbbabababbbabbbbbbabaaaa
bbabbbbaabaabba
babbbbaabbbbbabbbbbbaabaaabaaa
aaabbbbbbaaaabaababaabababbabaaabbababababaaa
bbbbbbbaaaabbbbaaabbabaaa
bbbababbbbaaaaaaaabbababaaababaabab
ababaaaaaabaaab
ababaaaaabbbaba
baabbaaaabbaaaababbaababb
abbbbabbbbaaaababbbbbbaaaababb
aaaaabbaabaaaaababaa
aaaabbaaaabbaaa
aaaabbaabbaaaaaaabbbabbbaaabbaabaaa
babaaabbbaaabaababbaabababaaab
aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba